import React, { useState, useRef, useEffect } from "react";
import { View, Text, TouchableOpacity, Alert, Image, StyleSheet, ScrollView } from "react-native";
import { Camera } from "expo-camera";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { storage } from "../firebaseConfig"; // ƒê·∫£m b·∫£o b·∫°n ƒë√£ c·∫•u h√¨nh Firebase

const CaptureScreen = () => {
  const [hasPermission, setHasPermission] = useState(null);
  const [images, setImages] = useState([]); // L∆∞u danh s√°ch ·∫£nh ƒë√£ ch·ª•p
  const cameraRef = useRef(null);

  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === "granted");
    })();
  }, []);

  const takePicture = async () => {
    if (!cameraRef.current) {
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ m·ªü camera!");
      return;
    }

    if (images.length < 5) {
      try {
        const photo = await cameraRef.current.takePictureAsync({ base64: true });
        setImages([...images, photo.uri]);
      } catch (error) {
        Alert.alert("L·ªói", "Ch·ª•p ·∫£nh th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
      }
    } else {
      Alert.alert("Th√¥ng b√°o", "B·∫°n ƒë√£ ch·ª•p ƒë·ªß 5 t·∫•m ·∫£nh!");
    }
  };

  const uploadImages = async () => {
    if (images.length === 0) {
      Alert.alert("L·ªói", "B·∫°n ch∆∞a ch·ª•p ·∫£nh n√†o ƒë·ªÉ t·∫£i l√™n!");
      return;
    }

    try {
      const urls = [];
      for (let i = 0; i < images.length; i++) {
        const response = await fetch(images[i]);
        const arrayBuffer = await response.arrayBuffer(); // S·ª≠ d·ª•ng arrayBuffer thay v√¨ blob
        const storageRef = ref(storage, `faces/image_${Date.now()}_${i}.jpg`);
        await uploadBytes(storageRef, new Uint8Array(arrayBuffer)); // Chuy·ªÉn ƒë·ªïi th√†nh Uint8Array
        const downloadURL = await getDownloadURL(storageRef);
        urls.push(downloadURL);
      }

      Alert.alert("T·∫£i l√™n th√†nh c√¥ng!", `ƒê∆∞·ªùng d·∫´n ·∫£nh:\n${urls.join("\n")}`);
    } catch (error) {
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i ·∫£nh l√™n Firebase. H√£y th·ª≠ l·∫°i!");
    }
  };

  if (hasPermission === null) {
    return <Text>ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p...</Text>;
  }
  if (hasPermission === false) {
    return <Text>B·∫°n ch∆∞a c·∫•p quy·ªÅn truy c·∫≠p camera!</Text>;
  }

  return (
    <View style={styles.container}>
      <Camera ref={cameraRef} style={styles.camera} />
      <View style={styles.controls}>
        <TouchableOpacity onPress={takePicture} style={styles.captureButton}>
          <Text style={styles.buttonText}>üì∏ Ch·ª•p ·∫£nh ({images.length}/5)</Text>
        </TouchableOpacity>
        {images.length === 5 && (
          <TouchableOpacity onPress={uploadImages} style={styles.uploadButton}>
            <Text style={styles.buttonText}>üöÄ T·∫£i ·∫£nh l√™n Firebase</Text>
          </TouchableOpacity>
        )}
      </View>
      <ScrollView horizontal style={styles.imagePreview}>
        {images.map((img, index) => (
          <Image key={index} source={{ uri: img }} style={styles.previewImage} />
        ))}
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  camera: { flex: 1 },
  controls: {
    position: "absolute",
    bottom: 20,
    width: "100%",
    alignItems: "center",
  },
  captureButton: {
    backgroundColor: "blue",
    padding: 12,
    borderRadius: 10,
    marginBottom: 10,
  },
  uploadButton: {
    backgroundColor: "green",
    padding: 12,
    borderRadius: 10,
  },
  buttonText: { color: "white", fontSize: 16, fontWeight: "bold" },
  imagePreview: {
    position: "absolute",
    bottom: 100,
    flexDirection: "row",
    paddingHorizontal: 10,
  },
  previewImage: {
    width: 60,
    height: 60,
    marginRight: 5,
    borderRadius: 5,
  },
});

export default CaptureScreen;
